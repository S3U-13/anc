"use client";
import { addToast } from "@heroui/toast";
import React, { useEffect, useState } from "react";
import { useForm } from "@tanstack/react-form";

import * as z from "zod";
import { useAuth } from "@/context/AuthContext";
import { useApiRequest } from "@/hooks/useApi";

export default function useHook({ closeModal }) {
  const auth = useAuth();
  const { patWifeData, patHusbandData, submitAnc, fetchDataAnc } =
    useApiRequest();
  const [pat, setPat] = useState(null); // üëà ‡πÄ‡∏Å‡πá‡∏ö object ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  const [patHusband, setPatHusband] = useState(null);
  const [hnInputWife, setHnInputWife] = useState("");
  const [hnInputHusband, setHnInputHusband] = useState("");
  const steps = ["wife", "husband"];
  const [activeStep, setActiveStep] = useState("wife");
  const defaultVitals = { weight: "", height: "" };
  const [editVitalsign, setEditVitalsign] = useState(defaultVitals);

  const [field, setField] = useState({
    hn_wife: "",
    sex: "",
    hn_husband: null,
  });

  const handleSearchHnWife = async () => {
    if (!hnInputWife) {
      addToast({
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å HN ‡∏†‡∏£‡∏£‡∏¢‡∏≤ ‡∏Å‡πà‡∏≠‡∏ô",
        description: "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ HN ‡∏†‡∏£‡∏£‡∏¢‡∏≤",
        variant: "flat",
        color: "warning",
      });
      return;
    }
    await patWifeData(hnInputWife, form, setPat); // ‚úÖ ‡∏™‡πà‡∏á setter
  };

  const handleSearchHnHusband = async () => {
    if (!hnInputHusband) {
      addToast({
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å HN ‡∏™‡∏≤‡∏°‡∏µ ‡∏Å‡πà‡∏≠‡∏ô",
        description: "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ HN ‡∏™‡∏≤‡∏°‡∏µ",
        variant: "flat",
        color: "warning",
      });
      return;
    }
    await patHusbandData(hnInputHusband, form, setPatHusband); // ‡∏£‡∏≠ fetch ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
  };

  const formatName = (pat) => {
    if (!pat) return "";

    let fullName = "";

    if (pat.prename) fullName += pat.prename; // ‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
    if (pat.firstname) fullName += pat.firstname; // ‡∏ï‡πà‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
    if (pat.lastname) fullName += " " + pat.lastname; // ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•

    return fullName;
  };

  const formatNameHusband = (patHusband) => {
    if (!patHusband) return "";

    let fullName = "";

    if (patHusband.prename) fullName += patHusband.prename; // ‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
    if (patHusband.firstname) fullName += patHusband.firstname; // ‡∏ï‡πà‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
    if (patHusband.lastname) fullName += " " + patHusband.lastname; // ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•

    return fullName;
  };

  const calculateAge = (birthdate) => {
    if (!birthdate) return "";

    const birth = new Date(birthdate);
    const today = new Date();

    let age = today.getFullYear() - birth.getFullYear();
    const m = today.getMonth() - birth.getMonth();

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏•‡∏ö 1
    if (m < 0 || (m === 0 && today.getDate() < birth.getDate())) {
      age--;
    }

    return `${age} ‡∏õ‡∏µ`;
  };

  const formatAddress = (pat_address) => {
    if (!pat_address) return "";

    let address = "";

    if (pat_address.house) address += pat_address.house;
    if (pat_address.moo) address += `‡∏´‡∏°‡∏π‡πà.${pat_address.moo}`;
    if (pat_address.soy) address += ` ‡∏ã‡∏≠‡∏¢ ${pat_address.soy}`;
    if (pat_address.road) address += ` ‡∏ñ‡∏ô‡∏ô ${pat_address.road}`;
    if (pat_address.tambon_detail?.detailtext)
      address += ` ‡∏ï‡∏≥‡∏ö‡∏•${pat_address.tambon_detail.detailtext}`;
    if (pat_address.amphur_detail?.detailtext)
      address += ` ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠${pat_address.amphur_detail.detailtext}`;
    if (pat_address.province_detail?.detailtext)
      address += ` ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î${pat_address.province_detail.detailtext}`;

    return address; // ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  };

  const vitals = pat?.pat_vitalsign?.[0];
  // sync editVitalsign ‡∏Å‡∏±‡∏ö pat ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å fetch ‡πÄ‡∏™‡∏£‡πá‡∏à
  useEffect(() => {
    if (pat?.pat_vitalsign?.[0]) {
      setEditVitalsign({
        weight: pat.pat_vitalsign[0].weight || "",
        height: pat.pat_vitalsign[0].height || "",
      });
    }
  }, [pat?.pat_vitalsign]);

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI ‡∏à‡∏≤‡∏Å editVitalsign
  const [bmi, setBmi] = useState("");

  useEffect(() => {
    const weight = parseFloat(editVitalsign.weight);
    const heightM = parseFloat(editVitalsign.height) / 100;
    if (weight && heightM) {
      setBmi((weight / (heightM * heightM)).toFixed(2));
    } else {
      setBmi("");
    }
  }, [editVitalsign.weight, editVitalsign.height]);

  // handle change ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ state editVitalsign
  const handleEditChange = (e) => {
    const { name, value } = e.target;
    setEditVitalsign((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    console.log(name, value); // ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡πÑ‡∏´‡∏°
    setField((prev) => ({
      ...prev,
      [name]: e.target.value,
    }));
  };

  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (value) => {
    if (isSubmitting) return;
    if (value.sex !== "‡∏´‡∏ç‡∏¥‡∏á") {
      addToast({
        title: "‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏†‡∏£‡∏£‡∏¢‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        description:
          "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ç‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
        color: "danger",
        variant: "flat",
      });
      return; // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ submit ‡∏ï‡πà‡∏≠
    }
    try {
      setIsSubmitting(true); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await submitAnc(value);
      form.reset();
      setPat(null);
      setPatHusband(null);
      setBmi("");
      setEditVitalsign(defaultVitals);
      setHnInputWife("");
      setHnInputHusband("");
      setActiveStep("wife");
      closeModal();
    } catch (error) {
      console.error(error);
    } finally {
      setIsSubmitting(false); // ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å
    }
  };

  const defaultValues = {
    hn_wife: "",
    hn_husband: null,
    sex: "",
  };

  const validationSchema = z.object({
    hn_wife: z.coerce.number().int().min(1, { message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å HN ‡∏†‡∏£‡∏£‡∏¢‡∏≤" }),
    sex: z.string(),
    hn_husband: z.coerce.number().int().nullable(),
  });

  const form = useForm({
    defaultValues,
    onSubmit: async ({ value }) => {
      // Validate ‡∏î‡πâ‡∏ß‡∏¢ Zod ‡∏Å‡πà‡∏≠‡∏ô submit
      try {
        const validatedData = validationSchema.parse(value);
        await handleSubmit(validatedData);
        console.log("Submit:", validatedData);
      } catch (error) {
        console.error("Validation error:", error);
      }
    },
    validators: {
      onSubmit: validationSchema,
    },
  });

  const makeValidator =
    (schema) =>
    ({ value }) => {
      try {
        schema.parse(value);
        return undefined; // ‚úÖ ‡∏ñ‡πâ‡∏≤ valid
      } catch (e) {
        return e.errors?.[0]?.message || "‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
      }
    };

  return {
    field,
    handleSearchHnWife,
    hnInputWife,
    setHnInputWife,
    handleSearchHnHusband,
    hnInputHusband,
    setHnInputHusband,
    pat,
    patHusband,
    formatAddress,
    formatName,
    formatNameHusband,
    calculateAge,
    editVitalsign,
    handleEditChange,
    vitals,
    bmi,
    setField,
    handleChange,
    handleSubmit,
    steps,
    activeStep,
    setActiveStep,
    form,
    validationSchema,
    makeValidator,
    isSubmitting,
  };
}
